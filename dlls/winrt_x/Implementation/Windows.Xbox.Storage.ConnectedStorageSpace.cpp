#include "pch.h"
#include "Windows.Xbox.Storage.ConnectedStorageSpace.h"

#include "Windows.Xbox.Storage.ConnectedStorageContainer.h"
#include "Windows.Xbox.Storage.ConnectedStorageSpace.g.cpp"
#include "Windows.Xbox.System.Console.h"
#include "Windows.Xbox.System.User.h"
#include "../ConnectedStorage/ConnectedStorage.h"
#include "Windows.Xbox.Storage.ContainerInfoQueryResult.h"
#include <synchapi.h>

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//////////static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::Windows::Xbox::Storage::implementation
{
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Storage::ConnectedStorageSpace> ConnectedStorageSpace::GetForUserAsync(winrt::Windows::Xbox::System::User user)
    {
        if (userStorageSpace == Storage::ConnectedStorageSpace(nullptr)) {
            auto storageClass = winrt::make<implementation::ConnectedStorageSpace>( );
        }

		co_return userStorageSpace;
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Storage::ConnectedStorageSpace> ConnectedStorageSpace::GetForUserAsync(winrt::Windows::Xbox::System::User user, hstring serviceConfigurationId)
    {
        if (userStorageSpace == Storage::ConnectedStorageSpace(nullptr)) {
            userStorageSpace = winrt::make<implementation::ConnectedStorageSpace>( );
        }

        co_return userStorageSpace;
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Storage::ConnectedStorageSpace> ConnectedStorageSpace::GetForMachineAsync()
    {
        if (userStorageSpace == Storage::ConnectedStorageSpace(nullptr)) {
            userStorageSpace = winrt::make<implementation::ConnectedStorageSpace>( );
        }

        co_return userStorageSpace;
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Storage::ConnectedStorageSpace> ConnectedStorageSpace::GetForMachineAsync(hstring serviceConfigurationId)
    {
        if (userStorageSpace == Storage::ConnectedStorageSpace(nullptr)) {
            userStorageSpace = winrt::make<implementation::ConnectedStorageSpace>( );
        }

        co_return userStorageSpace;
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Storage::ConnectedStorageSpace> ConnectedStorageSpace::GetSyncOnDemandForUserAsync(winrt::Windows::Xbox::System::User user)
    {
        if (userStorageSpace == Storage::ConnectedStorageSpace(nullptr)) {
            userStorageSpace = winrt::make<implementation::ConnectedStorageSpace>( );
        }

        co_return userStorageSpace;
    }
    winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Xbox::Storage::ConnectedStorageSpace> ConnectedStorageSpace::GetSyncOnDemandForUserAsync(winrt::Windows::Xbox::System::User user, hstring serviceConfigurationId)
    {
        if (userStorageSpace == Storage::ConnectedStorageSpace(nullptr)) {
            userStorageSpace = winrt::make<implementation::ConnectedStorageSpace>( );
        }

        co_return userStorageSpace;
    }
    winrt::Windows::Xbox::System::User ConnectedStorageSpace::User()
    {
        return System::implementation::User::Users( ).GetAt(0);
    }
    hstring ConnectedStorageSpace::ServiceConfigurationId()
    {
        throw hresult_not_implemented();
    }
    bool ConnectedStorageSpace::IsReadOnly()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Xbox::Storage::ConnectedStorageContainer ConnectedStorageSpace::CreateContainer(hstring const& containerName)
    {
		if (WinDurango::impl::s_userStorage == nullptr)
			assert("s_userStorage is null");

        if (containers == nullptr)
            containers = winrt::single_threaded_map<hstring, winrt::Windows::Xbox::Storage::ConnectedStorageContainer>( );

        if (!containers.HasKey(containerName)) {
            winrt::Windows::Xbox::Storage::ConnectedStorageContainer container = winrt::make<ConnectedStorageContainer>(containerName);

            containers.Insert(containerName, container);

            SetEvent(WinDurango::impl::h_ContainerWriteEvent);
            return container;
        }
        else {
            return containers.Lookup(containerName);
        }
    }

    winrt::Windows::Foundation::IAsyncAction ConnectedStorageSpace::DeleteContainerAsync(hstring containerName)
    {
        co_return;
    }

    winrt::Windows::Xbox::Storage::ContainerInfoQueryResult ConnectedStorageSpace::CreateContainerInfoQuery(hstring const& containerNamePrefix)
    {
        return winrt::make<winrt::Windows::Xbox::Storage::implementation::ContainerInfoQueryResult>(containerNamePrefix);
    }
    winrt::Windows::Foundation::IAsyncOperation<int32_t> ConnectedStorageSpace::GetRemainingBytesInQuotaAsync()
    {
        throw hresult_not_implemented();
    }
    winrt::Windows::Foundation::IAsyncOperation<int64_t> ConnectedStorageSpace::GetRemainingBytesInQuota64Async()
    {
        throw hresult_not_implemented();
    }
}
